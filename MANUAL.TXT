 @@@@@                                          @     @
@     @    @@    @    @    @@    @@@@@   @    @  @   @
@         @  @   @@  @@   @  @   @    @  @    @   @ @
 @@@@@   @    @  @ @@ @  @    @  @    @  @    @    @
      @  @@@@@@  @    @  @@@@@@  @@@@@   @    @   @ @
@     @  @    @  @    @  @    @  @   @   @    @  @   @
 @@@@@   @    @  @    @  @    @  @    @   @@@@  @     @


               +-----------------------+
               |     S a m a r u X     |
               |                       |
               | U s e r   M a n u a l |
               +-----------------------+


         A shell for the CP/M(tm) Operating System



   Copyright (c) Miguel I. Garcia Lopez / FloppySoftware

                  www.floppysoftware.es
              cpm-connections.blogspot.com
                floppysoftware@gmail.com




CP/M is a registered trademark of Digital Research Inc.
Z80 is a registered trademark of Zilog.
Unix is a registered trademark of The Open Group.

This manual covers SamaruX version 2.07 / 18 Dec 2016

=== oOo ===

+-------------------+
| TABLE OF CONTENTS |
+-------------------+

CHAPTER 1 : INTRODUCTION
            1.01 : SamaruX

CHAPTER 2 : ENVIRONMENT
            2.01 : Command line
            2.02 : Environment variables
            2.03 : File and directory names
            2.04 : Profiling the shell
            2.05 : Terminal settings

CHAPTER 3 : BUILT-IN COMMANDS
            3.01 : alias - Manage command aliases
            3.02 : ascii - Print the character table
            3.03 : batch - Execute commands from a file
            3.04 : builtin - Print the internal command names
            3.05 : cat - Concatenate files
            3.06 : cd - Change the current working directory
            3.07 : chmod - Change file modes
            3.08 : clear - Clear the console
            3.09 : cp - Copy files
            3.10 : cpm - Execute CP/M commands
            3.11 : date - Print or set the system date and time
            3.12 : df - Print free disk space
            3.13 : diralias - Manage directory names
            3.14 : dump - Print files in hexadecimal and ascii
            3.15 : echo - Print its arguments
            3.16 : ed - Edit small text files
            3.17 : env - Manage environment variables
            3.18 : exit - Quit the shell
            3.19 : false - Return false.
            3.20 : fortune - Print a random fortune.
            3.21 : goto - Jump to label in batch mode
            3.22 : grep - Find text patterns in files
            3.23 : head - Print first lines from files
            3.24 : history - Manage command line history
            3.25 : if - Test condition
            3.26 : ls - List files
            3.27 : man - Print manual pages
            3.28 : mem - Print memory usage
            3.29 : more - Print the contents of text files
            3.30 : mv - Rename files
            3.31 : pwd - Print the current working directory
            3.32 : read - Read a line from standard input
            3.33 : rm - Remove files
            3.34 : shift - Shift positional parameters to the left
            3.35 : sleep - Suspend execution
            3.36 : sort - Sort text lines
            3.37 : tail - Print last lines from files
            3.38 : tee - Duplicate the standard input
            3.39 : true - Return true.
            3.40 : tty - Return user's terminal name.
			3.41 : type - Print information about command type.
            3.42 : ver - Print CP/M version and facts
            3.43 : wc - Count newlines, words and characters
            3.44 : whoami - Print the user name

=== oOo ===

+-----------+
| CHAPTER 1 |  INTRODUCTION
+-----------+

+--------------+
| SECTION 1.01 |  SamaruX
+--------------+

NAME
	SamaruX - Unix-like shell for CP/M systems
	
	(c) 2014, 2015 FloppySoftware, Valencia, Spain
	www.floppysoftware.es
	cpm-connections.blogspot.com
	floppysoftware@gmail.com

SYNOPSIS
	samarux [arg ...]

DESCRIPTION
	SamaruX is a Unix-like shell for Z80 computers, running
	the CP/M operating system from Digital Research Inc.
	
	It has been developed with MESCC (Mike's Enhanced Small
	C Compiler).

OPTIONS
	The optional command line, is a command line for the shell.
	
	If you enter a command line, then SamaruX will execute the
	command and return to CP/M (this is known as CP/M mode).
	
	If no command line is given, SamaruX presents the shell
	prompt, waiting for user commands (this is known
	as interactive mode).
	
	In the interactive mode, enter the exit command to
	leave SamaruX and return to CP/M.
	
	In both modes, there is an optional profiling procedure,
	to setup your environment, according to your
	preferences.
	
	SamaruX has some built-in commands, and since version
	2.00, it has some external commands too.

EXAMPLES
	samarux               -- To enter to the interactive shell
	samarux cat file.txt  -- To execute the SamaruX cat
	                         command and exit to CP/M

NOTES
	See the topics in the manual (with man), to learn about
	its commands, options, profiling, compiling, etc.

=== oOo ===

+-----------+
| CHAPTER 2 |  ENVIRONMENT
+-----------+

+--------------+
| SECTION 2.01 |  Command line
+--------------+

NAME
	Command edition

SYNOPSIS
	Rules to edit command lines

DESCRIPTION
	An usual command line looks like this:
	
	   command arg0 arg1 arg2 ...
	
	To include spaces in an argument, enclose it between
	single quotes:
	
	   'This is a single argument'
	
	Environment variables can be used in the command line as
	arguments and they will be substituted with their values,
	if you precede them with '$':
	
	   echo Your name is $USER
	
	You can include more than a command in the same command
	line, by separating them with the ';' character:
	
	   cp letter.old letter.new ; cat letter.new
	
	A command line starting with the '#' character, it is a
	comment, with no effect:
	
	   # This is a comment, not a command
	
	You can redirect stdin (console input) with the '<'
	character:
	
	   ed < letter.txt
	
	You can redirect stdout (console output) with '>' or
	'>>':
	
	   ls *.c > mydir.txt
	   echo 'Buy some butler' >> todo.txt
	
	You can redirect the output of a command to the input
	of another command (piping), with the character '|':
	
	   ls *.c | more
	
	Or you can enter a combination of above.
	
	You can use the following control characters to edit
	the command line:
	
	   - To delete the last character:
	
	     BS / CTRL-H (0x08)
	     DEL         (0x7F)
	
	   - To delete the entire line:
	
	     CTRL-U (0x15)
	     CTRL-X (0x18)
	
	   - To retype the line:
	
	     CTRL-R (0x12)
	
	   - To execute the line:
	
	     CR / CTRL-M (0x0D)
	     LF / CTRL-J (0x0A)
	
	Be aware that in the case of external commands,
	if the variable BINDIR exists, SamaruX will
	search there the executable files.
	
	If the variable doesn't exists, SamaruX will
	search in the current working directory.
	
	To force SamaruX to search in another directory,
	prefix the filename with it:
	
	   a04:program
	
	To force SamaruX to search in the current working
	directory, prefix the filename with ':':
	
	   :program

NOTES
	Some commands (alias) have restrictions on above.
	
	Pipes are done using temporary files.

+--------------+
| SECTION 2.02 |  Environment variables
+--------------+

NAME
	Environment variables

SYNOPSIS
	Environment (& pseudo-environment) variables

DESCRIPTION
	Environment variables can be used in the command line as
	arguments and they will be substituted with their values,
	if you precede them with '$'.
	
	Pseudo-environment variables are not stored as environment
	variables, but they can be used in command lines as if
	they were.
	
	Some SamaruX environment variables include:
	
	  $BINDIR  - Directory for SamaruX external commands.
	
	  $HOME    - Default user directory.
	
	  $TERM    - Terminal name.
	
	  $LINES   - Terminal rows.
	
	  $COLUMNS - Terminal columns.
	
	  $USER    - User name.
	
	  $PROMPT  - Prompt string, with some special sequences:
	
	             %$ : $ symbol.
	             %u : User name (reads $USER).
	             %w : Working directory.
	             %% : % symbol.
	
	  $TMPDIR  - Temporary directory.
	
	  $MANPATH - Path for manual file.
	
	SamaruX pseudo-environment variables are:
	
	  $? - Exit code of last executed command (0 for SUCCESS,
	       1 for FAILURE).
	
	When executing batch commands, there are some additional
	pseudo-environment variables:
	
	  $0        - Batch file name.
	  $1 ... $9 - Batch arguments.
	  $#        - Number of arguments supplied to batch.

EXAMPLES
	echo My terminal is $TERM and I am $USER
	rm myfile.txt ; echo RM exit code is $?
	env PROMPT [%u in %w] %$

NOTES
	See related topics as batch, profile, terminal, etc.

+--------------+
| SECTION 2.03 |  File and directory names
+--------------+

NAME
	File and directory names

SYNOPSIS
	Rules to name files and directories

DESCRIPTION
	SamaruX accepts all usual CP/M file names, including
	wildcards (* and ?) with the usual behaviour.
	
	In addition to this, you can specify the directory in
	the file name.
	
	A directory can be named with its drive letter and
	user number.
	
	Also, you can use the diralias command to name
	directories, and use that name instead.
	
	If the drive letter is not included, it's assumed to
	be the current drive.(1)
	
	If the user number is not included, it's assumed to
	be the current user number.(1)
	
	(1) Be aware that in some circunstances, SamaruX will
	    search a file in another directory, instead of the
	    current one, if you don't specify it in the
	    filename (see the variables BINDIR for external
	    executables, and MANPATH for manuals).
	    To force SamaruX to search a file in the current
	    working directory, prefix the filename with the
	    character ':', as in:
	
	    :myprog
	    man :mescc stdio

EXAMPLES
	Legal file and directory names:
	
	a01:file.txt   -- File in drive A, user number 1
	2:account.dat  -- File in current drive, user number 2
	*.h            -- Files matching *.h in current directory
	b2:*.c         -- Files matching *.c in drive A, user
	                  number 2
	c3:            -- Directory on drive A, user number 3
	
	Using diralias to name directories:
	
	diralias root a0:
	ls root:*.x
	cd root:
	
	Illegal file and directory names:
	
	a:letter.doc  -- User number not included
	c:            -- User number not included

NOTES
	In some commands, a directory name is equivalent to
	all files in that directory (i.e. A2: means A2:*.*).
	
	See the diralias command, to know more about directory
	names.

+--------------+
| SECTION 2.04 |  Profiling the shell
+--------------+

NAME
	Profile

SYNOPSIS
	Profiling the shell

DESCRIPTION
	When running the shell, an optional startup file can be
	used to setup your SamaruX environment:
	
	profile.sx : For interactive mode.
	profcpm.sx : For CP/M mode.

+--------------+
| SECTION 2.05 |  Terminal settings
+--------------+

NAME
	Terminal

SYNOPSIS
	Terminal settings

DESCRIPTION
	The terminal settings can be controlled by following
	environment variables:
	
	  $TERM    - Terminal name: vt52, vt100 (or ansi),
	             ascii.
	
	  $LINES   - Terminal rows (> 0 and < 256).
	
	  $COLUMNS - Terminal columns (> 0 and < 256).
	
	When a command asks for terminal rows or columns,
	the procedure is as follows:
	
	  - If the environment variable exists and has a
	    legal value, this value is used.
	
	  - Else, if CP/M is version 3, the values from
	    the SCB (System Control Block) are used.
	
	  - Else, the default values are used (25 rows,
	    80 columns).

+--------------+
| SECTION 2.06 |  Compiling SamaruX and its commands
+--------------+

NAME
	How to compile the SamaruX shell and its commands

SYNOPSIS
	This topic explains how to compile the shell with
	its builtin commands, and the external commands.

DESCRIPTION
	To compile the shell (and its builtin commands):
	
	  1.Compile with MESCC - in CP/M:
	    cc sx
	  2.Optimize the code (optional) - in CP/M:
	    ccopt sx.zsm
	  3.Assemble the ZSM file - in CP/M:
	    zsm sx
	  4.Build the COM file from the HEX file - in CP/M:
	    hextocom sx
	
	Once you have build the shell, you must modify the
	file samarux.h, and recompile all the SamaruX external
	commands.
	
	To compile an external command (for example: less.c):
	
	  1.Compile with MESCC - in CP/M:
	    cc less
	  2.Optimize the code (optional) - in CP/M:
	    ccopt less.zsm
	  3.Build the REL file - in the host OS:
	    zmac less.zsm --rel
	  4.Build the PRL file - in CP/M:
	    link less [OP]
	  5.Rename the file from PRL to X - in CP/M:
	    ren less.prl less.x

NOTES
	To build the REL file, I use ZMAC version 03 Dec 2014,
	a Z80 cross assembler, downloaded from George Phillips's
	site: http://members.shaw.ca/gp2000/zmac.html.
	
	Of course, you can use your preferred tools to achieve
	the same results: emulators, hexcom, genprl, etc.
	
	See the source files for more information.

=== oOo ===

+-----------+
| CHAPTER 3 |  BUILT-IN COMMANDS
+-----------+

+--------------+
| SECTION 3.01 |  alias
+--------------+

NAME
	alias - Manage command aliases

SYNOPSIS
	alias [name [arg ...]]

DESCRIPTION
	The command alias creates, removes and prints command
	aliases.
	
	To create (or modify) an alias, enter the alias name,
	the real command name and the arguments (if any).
	
	To remove an alias, simply enter the alias name.
	
	To print all the aliases, enter a command line
	without arguments.

OPTIONS
	None.

EXAMPLES
	alias            = Prints all the aliases
	alias dir ls     = Creates an alias without arguments
	alias lf ls -f   = Creates an alias with arguments
	alias lf         = Removes the named alias

NOTES
	Aliases defined with arguments can't be executed with
	pipes (single aliases, can).

+--------------+
| SECTION 3.02 |  ascii
+--------------+

NAME
	ascii - Print the character table

SYNOPSIS
	ascii

DESCRIPTION
	The command ascii prints the character table.

OPTIONS
	None.

EXAMPLES
	ascii

+--------------+
| SECTION 3.03 |  batch
+--------------+

NAME
	batch - Execute commands from a file

SYNOPSIS
	batch file [arg ...]

DESCRIPTION
	The command batch executes commands from a file.
	
	If it's not specified, the default type for the
	file name will be ".sx".
	
	When executing, the name of the file becomes
	the $0 variable.
	
	If arguments are included, the 1st argument becomes
	the $1 variable, the 2nd argument becomes the $2
	variable and so on.
	
	The $# variable will have the number of arguments
	supplied to batch.

OPTIONS
	None.

EXAMPLES
	batch setmyenv John B01:
	batch backup.sx

NOTES
	Batch commands can be nexted up to 3 levels.

+--------------+
| SECTION 3.04 |  builtin
+--------------+

NAME
	builtin - Print the internal command names

SYNOPSIS
	cmds

DESCRIPTION
	The command builtin prints the available internal
	command names.

OPTIONS
	None.

EXAMPLES
	builtin

+--------------+
| SECTION 3.05 |  cat
+--------------+

NAME
	cat - Concatenate files

SYNOPSIS
	cat [-kn] [file ...]

DESCRIPTION
	The command cat writes its input to the standard output.
	
	If no arguments are given, it reads from the standard
	input.
	
	The - file means the standard input.

OPTIONS
	-k  Skip empty lines
	-n  Number lines

EXAMPLES
	cat
	cat -kn phrases.txt
	cat -n facts.doc
	cat header.txt - footer.txt > myletter.txt

+--------------+
| SECTION 3.06 |  cd
+--------------+

NAME
	cd - Change the current working directory

SYNOPSIS
	cd [directory]

DESCRIPTION
	The command cd changes the current working directory.
	
	If the directory is not supplied as an argument, cd
	tries to use the $HOME environment variable.

OPTIONS
	None.

EXAMPLES
	cd A02:
	cd 1:
	cd

NOTES
	See the diralias command, for directory names.

+--------------+
| SECTION 3.07 |  chmod
+--------------+

NAME
	chmod - Change file modes (CP/M attributes)

SYNOPSIS
	chmod mode file ...

DESCRIPTION
	The command chmod changes file modes (CP/M attributes).

OPTIONS
	Modes are:
	
	+w  To set   write permission  (R/W in CP/M).
	-w  To reset write permission  (R/O in CP/M).
	+s  To set   system attribute  (SYS in CP/M).
	-s  To reset system attribute  (DIR in CP/M).
	+a  To set   archive attribute (ARCHIVE ON  in CP/M 3).
	-a  To reset archive attribute (ARCHIVE OFF in CP/M 3).
	
	Modes can be combined.
	
	If an attribute is not specified, it will remain unchanged.

EXAMPLES
	chmod +s login.com
	chmod +wa-s notes.txt calendar.doc

+--------------+
| SECTION 3.08 |  clear
+--------------+

NAME
	clear - Clear the console

SYNOPSIS
	clear

DESCRIPTION
	The command clear clears the console.

OPTIONS
	None.

EXAMPLES
	clear

NOTES
	The command clear searches for the $TERM environment
	variable, in order to know how to clear the console.

+--------------+
| SECTION 3.09 |  cp
+--------------+

NAME
	cp - Copy files

SYNOPSIS
	cp [-fi] file_src file_dst
	cp [-fi] src ... directory

DESCRIPTION
	The command cp copies files.
	
	In the first form, only a single file can be copied.
	
	In the second form, more than a file can be copied (src
	can be a single file, an ambiguous file name, or a
	directory).

OPTIONS
	-f  Force:       Delete destination if already exists
	-i  Interactive: Asks to user to delete destination if
	                 already exists. It has prevalence
	                 over -f option.
	-v  Verbose

EXAMPLES
	cp myfile.txt myfile.bak
	cp -i cat.c ls.c head.c b01:
	cp 1:*.c 2:*.h 3:
	cp -fv a00: b01:

+--------------+
| SECTION 3.10 |  cpm
+--------------+

NAME
	cpm - Execute CP/M commands

SYNOPSIS
	cpm command [arg ...]

DESCRIPTION
	The command cpm executes CP/M commands as PIP, STAT,
	ED, BASIC, etc.
	
	Pipes or redirections are useless.
	
	If there are other commands after this in the same command
	line, they will not be executed.
	
	The procedure is:
	
	  - Save current environment variables and aliases.
	  - Exit from SamaruX to CP/M.
	  - Execute the CP/M command.
	  - Execute SamaruX quietly.
	  - Restore environment variables and aliases.

OPTIONS
	None.

EXAMPLES
	cpm PIP A:=B:*.TXT
	cpm BASIC myprog
	cpm WS

NOTES
	In CP/M 2, it uses the $$$.SUB feature of the
	standard CP/M CCP.
	
	In CP/M 3, it uses the BDOS function CHAIN TO PROGRAM.
	
	It uses the temporary batch file PROFRST.SX to load and
	save the environment variables and aliases.

+--------------+
| SECTION 3.11 |  date
+--------------+

NAME
	date - Print or set the system date and time

SYNOPSIS
	date [[YYYY-MM-DD] hh:mm:ss]
	date [[YYYY/MM/DD] hh:mm:ss]

DESCRIPTION
	The command date prints or sets the system date and
	time.

OPTIONS
	None.

EXAMPLES
	date
	date 17:20:00
	date 2015-04-08 17:20:00

NOTES
	Needs CP/M version 3.

+--------------+
| SECTION 3.12 |  df
+--------------+

NAME
	df - Print free disk space

SYNOPSIS
	df [drive ...]

DESCRIPTION
	The command df prints the free disk space for the
	specified drives.
	If no drive is specified, it prints the free disk
	space for the current drive.

OPTIONS
	None.

EXAMPLES
	df
	df A: B:

+--------------+
| SECTION 3.13 |  diralias
+--------------+

NAME
	diralias - Manage directory names

SYNOPSIS
	diralias [name [directory]]

DESCRIPTION
	The command diralias manages the directory names.
	
	A directory name, is an alias for a drive and user
	specification.
	
	To create a directory alias, enter the alias name,
	followed by the drive and user specification.
	
	To delete a directory alias, simply enter the alias
	name.
	
	To print all the directory aliases, enter a command
	line without arguments.

OPTIONS
	None.

EXAMPLES
	diralias          = Prints all the directory aliases
	diralias root a0: = ROOT: will reference A00:
	diralias root     = Removes the directory alias
	
	cd root:
	ls root:*.txt
	cat root:profile.sx

+--------------+
| SECTION 3.14 |  dump
+--------------+

NAME
	dump - Print files in hexadecimal and ascii

SYNOPSIS
	dump file ...

DESCRIPTION
	The command dump prints files in hexadecimal and
	ascii form.

OPTIONS
	None.

EXAMPLES
	dump dump.com
	dump login.txt cat.com

+--------------+
| SECTION 3.15 |  echo
+--------------+

NAME
	echo - Print its arguments

SYNOPSIS
	echo [-n] [arg ...]

DESCRIPTION
	The command echo prints its arguments.

OPTIONS
	-n  To suppress the new line.

EXAMPLES
	echo Hello world
	echo -n Hello world

+--------------+
| SECTION 3.16 |  ed
+--------------+

NAME
	ed - Edit small text files

SYNOPSIS
	ed [file]

DESCRIPTION
	The command ed edits small text files.
	
	Once in the editor, you can enter the following commands:
	
	edit   line_number   -- Edit an line
	insert line_number   -- Insert a line over another
	remove line_number   -- Remove (delele) a line
	copy   line_number   -- Copy to clipboard
	paste  line_number   -- Paste from clipboard
	append               -- Append a line
	print  [line_number [how_many_lines]]
	                     -- Print lines on the console
	write  [file_name]   -- Write the file
	info                 -- Information
	help                 -- Help on commands
	exit                 -- Exit to shell

OPTIONS
	None.

EXAMPLES
	ed letter.txt
	1 lines read.
	ed> print
	    0: Hello
	ed> append
	    1: Bye!
	ed> print
	    0: Hello
	    1: Bye!
	ed> insert 1
	    1: How are you?
	ed> edit 0
	    0: Hello my friend.
	ed> print
	    0: Hello my friend.
	    1: How are you?
	    2: Bye!
	ed> write
	ed> exit

+--------------+
| SECTION 3.17 |  env
+--------------+

NAME
	env - Manage environment variables

SYNOPSIS
	env [name [arg ...]]
	env [-s] name arg ...

DESCRIPTION
	The command env creates, removes and prints environment
	variables.
	
	To create (or modify) an environment variable, enter the
	variable name, and the arguments.
	
	To remove an environment variable, simply enter the
	variable name.
	
	To print all the environment variables, enter a command
	line without arguments.

OPTIONS
	-s  To skip spaces

EXAMPLES
	env                      = Prints all the variables
	env TERM vt52            = Creates a variable
	env TERM                 = Removes the named variable
	env -s NAME John Smith   = Creates NAME as JohnSmith
	env -s FILE $HOME phones = Creates FILE as A00:phones

NOTES
	See the topic 'variables' to find a list of environment
	variables used by SamaruX.

+--------------+
| SECTION 3.18 |  exit
+--------------+

NAME
	exit - Quit the shell

SYNOPSIS
	exit

DESCRIPTION
	The command exit quits the shell.

OPTIONS
	None.

EXAMPLES
	exit

+--------------+
| SECTION 3.19 |  false
+--------------+

NAME
	false - Return false

SYNOPSIS
	false

DESCRIPTION
	The command false returns the value false: 1.

OPTIONS
	None.

EXAMPLES
	false

+--------------+
| SECTION 3.20 |  fortune
+--------------+

NAME
	fortune - Print a random adage

SYNOPSIS
	fortune [file]

DESCRIPTION
	The command fortune prints a random epigram of
	one line of text.
	
	If no file is specified in the command line, the
	source for epigrams will be the file 'fortunes.txt'.

OPTIONS
	None.

EXAMPLES
	fortune
	fortune jokes.txt

+--------------+
| SECTION 3.21 |  goto
+--------------+

NAME
	goto - Jump to label in batch mode

SYNOPSIS
	goto label

DESCRIPTION
	The command goto jumps to a label in batch mode.
	
	Labels are maximum 8 characteres long, must follow a
	comment and must end with a ':' (see example).

OPTIONS
	None.

EXAMPLES
	1: # Entry:
	2: echo -n Enter 'y':
	3: read REPLY
	4: if $REPLY eq y goto Cont
	5: goto Entry
	6: # Cont:

+--------------+
| SECTION 3.22 |  grep
+--------------+

NAME
	grep - Find text patterns in files

SYNOPSIS
	grep [-options] pattern [file ...]

DESCRIPTION
	The command greps find patterns in files and sends the
	result to the standard output.
	
	If no file names are entered, more reads from the
	standard input.
	
	The - file means the standard input.

OPTIONS
	-c : Count [non] matching lines.
	-i : Ignore case.
	-v : Select non matching lines instead of matching ones.

EXAMPLES
	grep -i Elvis bio.txt story.txt article.doc

+--------------+
| SECTION 3.23 |  head
+--------------+

NAME
	head - Print first lines from files

SYNOPSIS
	head [-nNUMBER] [file ...]

DESCRIPTION
	The command head writes the first NUMBER lines from files
	to the standard output.
	
	If no arguments are given, it reads from the standard
	input.
	
	The - file means the standard input.

OPTIONS
	-nNUMBER  Writes up to NUMBER lines (default = 10).

EXAMPLES
	head -n12 mytasks.txt
	head myapp.c

+--------------+
| SECTION 3.24 |  history
+--------------+

NAME
	history - Manage command line history

SYNOPSIS
	history [entry]

DESCRIPTION
	The command history selects an entry from the
	command line history or prints all the entries.
	
	To select a history entry, enter the entry
	number. The entry number 0 has the last
	entered command line.
	
	To print the history entries, enter a command
	line without arguments.

OPTIONS
	None.

EXAMPLES
	history 0   = Selects the last command line
	history 3   = Selects the entry number 3
	history     = Prints all the history entries

+--------------+
| SECTION 3.25 |  if
+--------------+

NAME
	if - Test condition

SYNOPSIS
	if arg1 [not] eq arg2 command
	if file [not] exist command
	if arg1 [not] in_env command

DESCRIPTION
	The command if tests a condition and runs a command if
	the result of the test is true:
	
	eq     -- Test if two strings are equal.
	exist  -- Test if a file exists.
	in_env -- Test if an environment variable exists.
	
	The optional word not inverts the test result.

OPTIONS
	None.

EXAMPLES
	if TERM not in_env echo Terminal type is unknown!
	if $USER eq John batch profjohn
	if letter.txt exist ed letter.txt

NOTES
	The command if it's very useful in batch mode.

+--------------+
| SECTION 3.26 |  ls
+--------------+

NAME
	ls - List files

SYNOPSIS
	ls [-avksfl ...] [dir|file ...]

DESCRIPTION
	The command ls list files.
	
	You can enter ambiguous file names.
	
	If no file name is entered, ls lists all
	the files (*.*).

OPTIONS
	-a  Print file attributes
	-v  Verbose
	-k  Print file sizes
	-s  Sort file names
	-f  Same as -aksv
	-l  Same as -aks

EXAMPLES
	ls a02:
	ls -f *.c
	ls -sv myfile.c m00:myfile.h myfile.zsm

+--------------+
| SECTION 3.27 |  man
+--------------+

NAME
	man - Print manual pages

SYNOPSIS
	man [[file] topic | ALL | TOPICS]

DESCRIPTION
	The command man prints manual pages about a topic, all
	topics, or prints the available topics.
	
	If no file name is given, man searchs in the default
	man file "samarux.man".
	
	If no arguments are given, the command is equivalent to:
	
	  man TOPICS
	
	The optional MANPATH environment variable has the man
	file path.
	
	If MANPATH does not exists or it's not a valid path,
	the current directory will be used instead.
	
	To force man to search in another directory, prefix the
	filename with it:
	
	   man a04:mescc stdio
	
	To force man to search in the current working directory,
	prefix the filename with ':':
	
	   man :mescc stdio

OPTIONS
	None.

EXAMPLES
	man           -- Print available topics in samarux.man
	man cat       -- Print cat topic help in samarux.man
	man ALL       -- Print all contents in samarux.man
	man wp TOPICS -- Print available topics in wp.man
	man wp fi     -- Print fi topic help in wp.man

+--------------+
| SECTION 3.28 |  mem
+--------------+

NAME
	mem - Print memory usage

SYNOPSIS
	mem

DESCRIPTION
	The command mem prints the free and used memory size
	in bytes.

OPTIONS
	None.

+--------------+
| SECTION 3.29 |  more
+--------------+

NAME
	more - Print the contents of text files

SYNOPSIS
	more [-number] [file ...]

DESCRIPTION
	The command more prints the contents of text files,
	doing a pause when the screen is full.
	
	You can enter the number of screen lines or leave
	more to take this data from the system.
	
	If no file names are entered, more reads from
	the standard input.
	
	The - file means the standard input.

OPTIONS
	-number  To specify the number of screen lines

EXAMPLES
	more
	more myfile.doc
	more -24 file.txt letter.doc

+--------------+
| SECTION 3.30 |  mv
+--------------+

NAME
	mv - Rename files

SYNOPSIS
	mv old_name new_name

DESCRIPTION
	The command mv rename files.

OPTIONS
	None.

EXAMPLES
	mv schedule.txt schedule.bak

NOTES
	The command mv can't be used to move files,
	or rename directories.

+--------------+
| SECTION 3.31 |  pwd
+--------------+

NAME
	pwd - Print the current working directory

SYNOPSIS
	pwd

DESCRIPTION
	The command pwd prints the current working
	directory.

OPTIONS
	None.

EXAMPLES
	pwd

+--------------+
| SECTION 3.32 |  read
+--------------+

NAME
	read - Read a line from standard input

SYNOPSIS
	read name

DESCRIPTION
	The command read reads a line from standard input and
	assign its value to an environment variable.

OPTIONS
	None

EXAMPLES
	echo -n Enter your name:
	read USER
	echo Hello $USER !!!

+--------------+
| SECTION 3.33 |  rm
+--------------+

NAME
	rm - Remove files

SYNOPSIS
	rm [-fi] dir|file ...

DESCRIPTION
	The command rm remove files.
	
	You can enter ambiguous file names.
	
	If a directory name is entered, rm assumes
	all the files in that directory (*.*).
	
	If the file name is ambiguous, rm will
	print an error if the option -f is not
	entered.

OPTIONS
	-f   To force deletion in ambiguous file names
	-i   To ask to user for each file deletion
	-v   To be verbose

EXAMPLES
	rm myfile.txt
	rm hello.c hello.h
	rm -f B01:
	rm -fi A02:*.bak

+--------------+
| SECTION 3.34 |  shift
+--------------+

NAME
	shift - Shift positional parameters to the left

SYNOPSIS
	shift

DESCRIPTION
	The shift command shifts the arguments inside a batch
	command one position to the left, and decrements $#.
	
	If there are no arguments ($# is 0), nothing happens.

OPTIONS
	None.

EXAMPLES
	batch myscript one two three
	
	  $# = 3, $1 = one, $2 = two, $3 = three
	
	  shift
	
	  $# = 2, $1 = two, $2 = three

+--------------+
| SECTION 3.35 |  sleep
+--------------+

NAME
	sleep - Suspend execution for a specified time

SYNOPSIS
	sleep seconds

DESCRIPTION
	The sleep command suspends the execution for the
	specified amount of seconds.

OPTIONS
	None.

EXAMPLES
	sleep 60

NOTES
	Needs CP/M version 3.

+--------------+
| SECTION 3.36 |  sort
+--------------+

NAME
	sort - Sort text lines

SYNOPSIS
	sort [-rn] [file ...]

DESCRIPTION
	The sort command sorts lines of text and sends
	the result to the standard output.
	
	If no file names are entered, sort reads from
	the standard input.
	
	The - file means the standard input.

OPTIONS
	-r   Reverse the result
	-n   Compare numbers instead of text

EXAMPLES
	grep 2015-05- tasks.txt | sort
	sort -n myprog.bas

+--------------+
| SECTION 3.37 |  tail
+--------------+

NAME
	tail - Print last lines from files

SYNOPSIS
	tail [-nNUMBER] [file ...]

DESCRIPTION
	The command tail writes the last NUMBER lines from files
	to the standard output.
	
	If no arguments are given, it reads from the standard
	input.
	
	The - file means the standard input.

OPTIONS
	-nNUMBER  Writes up to NUMBER lines (default = 10).

EXAMPLES
	tail -n12 mytasks.txt
	tail myapp.c

+--------------+
| SECTION 3.38 |  tee
+--------------+

NAME
	tee - Copy standard input to standard output
	      and to a file.

SYNOPSIS
	tee file

DESCRIPTION
	The tee command copy the standard input to the
	standard output and to a file.

OPTIONS
	None.

EXAMPLES
	cat profile.sx | tee profile.bak

+--------------+
| SECTION 3.39 |  true
+--------------+

NAME
	true - Return true

SYNOPSIS
	true

DESCRIPTION
	The command false returns the value true: 0.

OPTIONS
	None.

EXAMPLES
	true

+--------------+
| SECTION 3.40 |  tty
+--------------+

NAME
	tty - Return user's terminal name

SYNOPSIS
	tty

DESCRIPTION
	The command tty prints the name of the terminal that is
	open as standard input - ie:
	
	  "vt52\n"            (tty returns 0)
	
	If standard input is not a terminal, it prints:
	
	  "not a tty\n"       (tty returns 1)

OPTIONS
	None.

EXAMPLES
	tty

+--------------+
| SECTION 3.41 |  type
+--------------+

NAME
	type - Print information about command type

SYNOPSIS
	type [-abtx] [name ...]

DESCRIPTION
	The command type prints, for each name, how it would be
	interpreted if used as a command name.

OPTIONS
	-a  Print all matches for each name
	-b  Exclude search for builtins
	-t  Print a single word instead of a full sentence:
	    alias, builtin, file or none
	-x  Exclude search for aliases

EXAMPLES
	type clear
	type -t cp mv ls

+--------------+
| SECTION 3.42 |  ver
+--------------+

NAME
	ver - Print SamaruX and CP/M versions and facts

SYNOPSIS
	ver

DESCRIPTION
	The command ver prints the SamaruX and CP/M versions,
	the free TPA memory, and some other information.

OPTIONS
	None.

EXAMPLES
	ver

+--------------+
| SECTION 3.43 |  wc
+--------------+

NAME
	wc - Count newlines, words and characters

SYNOPSIS
	wc [file ...]

DESCRIPTION
	The command wc counts the number of newlines, words
	and characters in files.
	
	It prints also a line with totals if more than one
	file is specified.
	
	If no file names are entered, wc reads from the
	standard input.
	
	The - file means the standard input.

OPTIONS
	None.

EXAMPLES
	wc mytasks.txt
	grep 2015 diary.doc | wc

NOTES
	The CR ('\r') characters will not be counted.

+--------------+
| SECTION 3.44 |  whoami
+--------------+

NAME
	whoami - Print the user name

SYNOPSIS
	whoami

DESCRIPTION
	The command whoami prints the user name.

OPTIONS
	None.

EXAMPLES
	whoami

